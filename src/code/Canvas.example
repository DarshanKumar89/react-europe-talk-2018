// @flow
import React, { Component } from 'react';

type Props = {
  width: number,
  height: number,
  draw: 
    (ctx: CanvasRenderingContext2D) => void,
};

class Canvas extends Component<Props> {
  componentDidMount() {
    this.ctx = this.canvas.getContext('2d');

    this.scale();

    this.props.draw(this.ctx);
  }

  componentDidUpdate() {
    this.props.draw(this.ctx);
  }

  scale = () => {
    const { width, height } = this.props;

    const ratio = 
      window.devicePixelRatio || 1;

    this.canvas.width = width * ratio;
    this.canvas.height = height * ratio;
    this.canvas.style.width = width + 'px';
    this.canvas.style.height = height + 'px';

    this.ctx.scale(ratio, ratio);
  };

  render() {
    const {
      width,
      height,
      draw,
      ...delegatedProps,
    } = this.props;

    return (
      <canvas
        ref={node => (this.canvas = node)}
        width={width}
        height={height}
        {...delegatedProps}
      />
    );
  }
}

export default Canvas;
