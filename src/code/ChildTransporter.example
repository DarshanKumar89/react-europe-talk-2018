class ChildTransporter extends Component {
  static propTypes = {
    children: PropTypes.node,
    from: PropTypes.object,
    to: PropTypes.object,
    status: PropTypes.oneOf([
      'open',
      'closed',
      'retracted',
    ]),
  };

  state = {
    inTransit: boolean,
    position: {
      top: null,
      left: null,
      right: null,
      bottom: null,
      scaleX: 0,
      scaleY: 0,
      translateX: 0,
      translateY: 0,
    },
  };

  componentWillReceiveProps(nextProps) {
    if (
      this.props.status !== nextProps.status
    ) {
      this.handleStatusChange(nextProps);
    }
  }

  handleStatusChange(nextProps) {
    const { from, to, status } = nextProps;

    this.fromRect = from.getBoundingClientRect();
    this.toRect = to.getBoundingClientRect();
    this.childRect = this.childWrapperNode.getBoundingClientRect();

    const initialPositionState = this.getInitialPositionState(
      status
    );

    this.setState(
      {
        position: initialPositionState,
      },
      this.startAnimation
    );
  }

  getInitialPositionState(status) {
    const childPosition = /* ✂️ */;
    const translate =
      this.getTranslate(/* ✂️ */);

    return {
      ...childPosition,
      ...translate
    };
  }

  startAnimation = () => {
    const scale =
      this.props.status === 'opening'
        ? 1
        : 0;

    this.setState({
      inTransit: true,
      position: {
        ...this.state.position,
        translateX: 0,
        translateY: 0,
        scaleX: scale,
        scaleY: scale,
      },
    });
  };

  getTranslate(pendingChildRect, status) {
    const {
      childRect: currentChildRect,
    } = this;

    if (
      status === 'open' ||
      status === 'retracted'
    ) {
      return { translateX: 0, translateY: 0 };
    }

    const [x, y] = getPositionDelta(
      currentChildRect,
      pendingChildRect
    );

    return { translateX: x, translateY: y };
  }

  finishPlaying = () => {
    this.setState({ inTransit: false });
  };

  render() {
    const { children } = this.props;
    const { status, position } = this.state;

    return (
      <Motion
        style={{
          scaleX: inTransit
            ? spring(position.scaleX)
            : position.scaleX,
          scaleY: inTransit
            ? spring(position.scaleY)
            : position.scaleY,
          translateX: inTransit
            ? spring(position.translateX)
            : position.translateX,
          translateY: inTransit
            ? spring(position.translateY)
            : position.translateY,
        }}
      >
        {({
          scaleX,
          scaleY,
          translateX,
          translateY,
        }) => (
          <div
            ref={node => {
              this.childWrapperNode = node;
            }}
            style={{
              ...position
              transform: `
                translate(${translateX}px, ${translateY}px)
                scale(${scaleX}, ${scaleY})
              `,
            }}
          >
            {children}
          </div>
        )}
      </Motion>
    );
  }
}

export default ChildTransporter;
