// @flow
import React, { PureComponent } from 'react';

import { defaultShapes } from './confetti-shapes.js';

class Particles extends PureComponent {
  static propTypes = {
    width: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    shapes: PropTypes.array,
    numParticles: PropTypes.number,
    emitDuration: PropTypes.number,
    gravity: PropTypes.number,
    spin: PropTypes.number,
    twist: PropTypes.number,
    minSpeed: PropTypes.number,
    maxSpeed: PropTypes.number,
    minScale: PropTypes.number,
    maxScale: PropTypes.number,
    children: PropTypes.func.isRequired,
  };

  static defaultProps = {
    shapes: defaultShapes,
    numParticles: 100,
    emitDuration: 1000,
    gravity: 1600,
    spin: 20,
    twist: 0,
    minSpeed: 225,
    maxSpeed: 675,
    minScale: 0.4,
    maxScale: 1.0,
  };

  state = {
    particles: [],
  };

  componentDidUpdate(prevProps, prevState) {
    if (
      prevState.particles.length === 0 &&
      this.state.particles.length > 0
    ) {
      this.tick();
    }
  }

  componentWillUnmount() {
    window.cancelAnimationFrame(this.rafId);
  }

  generateParticles = () => {
    let i = 0;
    let particles = [];

    while (i < this.props.numParticles) {
      // ✂️ Snip ✂️
      // Initialize all of the variables
      // like scale, speed, and amount of
      // spin/twist.

      const angle = /* snip */
      const trajectoryVariance = /* snip */
      const trajectory = /* snip */
      const vx = /* snip */
      const vy = /* snip */

      particles.push({
        birth,
        initialPosition,
        currentPosition: initialPosition,
        spinForce,
        twistForce,
        currentSpin,
        currentTwist,
        angle,
        scale,
        vx,
        vy,
        front,
        back,
        width: front.naturalWidth,
        height: front.naturalHeight,
      });

      i++;
    }

    this.setState({
      particles: [
        ...this.state.particles,
        newParticles,
      ],
    });
  };

  tick = () => {
    if (this.state.particles.length === 0) {
      return;
    }

    const particles =
      this.getUpdatedParticles();

    this.rafId = window.requestAnimationFrame(
      () => {
        this.setState(
          { particles },
          this.tick
        );
      }
    );
  };

  getUpdatedParticles = () => {
    const { height, width } = this.props;

    return this.state.particles
      .map(particle => {
        // ✂️ Snip ✂️
        // Calculate the next values for all
        // particle properties.

        const isOffscreen = /* snip */
        if (isOffscreen) {
          return null;
        }

        return particle;
      })
      .filter(particle => !!particle);
  };

  render() {
    const { children } = this.props;
    const { particles } = this.state;

    return children({
      // State
      particles,

      // Actions
      generateParticles:
        this.generateParticles,
    });
  }
}

export default Particles;
