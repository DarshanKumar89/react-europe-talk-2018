import React, { Component } from 'react';

import {
  random,
  sample,
  getDiameter,
} from './Confetti.helpers';
import Canvas from '../Canvas';

import type {
  Particle,
  Shape,
} from './types.js';

export type Props = {
  width: number,
  height: number,
  particles: Array<Particle>,
  onClick?: () => void,
};

class Confetti extends Component<Props> {
  draw = (ctx: CanvasRenderingContext2D) => {
    const {
      width,
      height,
      particles,
    } = this.props;

    ctx.clearRect(0, 0, width, height);

    particles.forEach(particle => {
      ctx.translate(
        particle.currentPosition.x,
        particle.currentPosition.y
      );

      ctx.rotate(particle.currentSpin);

      ctx.scale(particle.currentTwist, 1);

      const imageElem =
        particle.currentTwist >= 0
          ? particle.front
          : particle.back;

      ctx.drawImage(
        imageElem,
        imageElem.naturalWidth *
          particle.scale *
          -0.5,
        imageElem.naturalHeight *
          particle.scale *
          -0.5,
        imageElem.naturalWidth *
          particle.scale,
        imageElem.naturalHeight *
          particle.scale
      );

      // Undo all of our transformations, so
      // that our context is restored.
      const r = window.devicePixelRatio || 1;
      ctx.setTransform(r, 0, 0, r, 0, 0);
    });
  };

  render() {
    const {
      width,
      height,
      onClick,
    } = this.props;

    return (
      <Canvas
        width={width}
        height={height}
        onClick={onClick}
        draw={this.draw}
      />
    );
  }
}

export default Confetti;
